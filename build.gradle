plugins {
    id 'java'
    id 'application'
    id 'org.beryx.jlink' version '3.0.1'  // For native packaging
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}
group = 'com.sypztep'
version = '1.0-SNAPSHOT'
description = 'Test LWJGL stuff'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

project.ext.lwjglVersion = "3.3.6"

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ?
                "natives-macos-arm64" : "natives-macos"
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

dependencies {
    // LWJGL Core with BOM for version management
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"

    // LWJGL Natives
    implementation "org.lwjgl:lwjgl::$lwjglNatives"
    implementation "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    implementation "org.lwjgl:lwjgl-openal::$lwjglNatives"
    implementation "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    implementation "org.lwjgl:lwjgl-stb::$lwjglNatives"

    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.5.13'  // Instead of slf4j-simple

    implementation 'org.joml:joml:1.10.5'

}
application {
    mainClass = 'com.sypztep.canval.Main'
}
test {
    useJUnitPlatform()
}

// Add to build.gradle
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

shadowJar {
    archiveClassifier = ''
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}